(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{377:function(t,e,a){},400:function(t,e,a){"use strict";a(377)},462:function(t,e,a){"use strict";a.r(e);var s=[{excerpt:"  call、apply、bind 區別  `call`、`apply` 這兩個方法可以調用函數並且修改 `this` 值，方便我們同一個函數傳遞不同的物件上下文達到復用。  - call - 第一個參數為 `this` 值，後續參數則為要當作函數的參數。 - apply - 第一個參數一樣為 `this` 值，而第二個參數為陣列，一樣為當作函數的參數。  至於 `bind` 也能夠綁定 `t......",tags:["javascript","JS基礎"],id:0,title:"call、apply、bind區別以及手寫",lastUpdated:"2023-01-14 05:07:34",path:"/posts/JS%E5%9F%BA%E7%A4%8E/call%E3%80%81apply%E3%80%81bind%E5%8D%80%E5%88%A5%E4%BB%A5%E5%8F%8A%E6%89%8B%E5%AF%AB.html"},{excerpt:"  前言  在執行上下文的詞法環境中，我們談到在創建詞法階段時會綁定 `this` 值，所以我們能夠知道 `this` 的值是在調用函數時才確認，而非創建函數時。   而該篇我們來談論 `this` 值是如何確定的。   this 是什麼? `this` 值是一個物件，該值是指向調用該函數的引用物件。   這樣設計是方便我們能夠用更隱式的方式傳遞引用物件，使得程式碼更加簡潔。     ......",tags:["javascript","JS基礎"],id:1,title:"this",lastUpdated:"2023-01-12 18:04:26",path:"/posts/JS%E5%9F%BA%E7%A4%8E/this.html"},{excerpt:'  閉包  函數在可訪問的作用域之外的地方被調用就會形成閉包。  用一個貼近生活的例子來說明閉包：  ```js function school() {   let schoolmaster = "陳校長";    return function securityGuard() {     function lier() {       schoolmaster = "許校長";     } ......',tags:["javascript","JS基礎"],id:2,title:"閉包",lastUpdated:"2023-01-08 02:44:38",path:"/posts/JS%E5%9F%BA%E7%A4%8E/%E9%96%89%E5%8C%85.html"},{excerpt:"  執行上下文  代碼執行時的環境，根據呼叫的方式不同可能會產生不同的結果。  ```js function hello(name){   console.log('hello,' name) }  hello('leo')  // hello,leo hello('evan') // hello,evan ```  呼叫相同函數，但是 `arguments` 傳遞不同值，會產生不同結果，這些......",tags:["javascript","JS基礎"],id:3,title:"執行上下文與執行棧",lastUpdated:"2023-01-06 01:20:56",path:"/posts/JS%E5%9F%BA%E7%A4%8E/%E5%9F%B7%E8%A1%8C%E4%B8%8A%E4%B8%8B%E6%96%87%E8%88%87%E5%9F%B7%E8%A1%8C%E6%A3%A7.html"},{excerpt:'  作用域  作用域是指可以訪問變數或函數的區域。  用一個例子來說明:  ```js function hello() {   let text = "hello";   console.log(text); }  hello(); // hello console.log(text); // text is not defined ```  當呼叫 `hello` 函數時, 我們可以透過變......',tags:["javascript","JS基礎"],id:4,title:"作用域與作用域鏈",lastUpdated:"2023-01-05 22:20:21",path:"/posts/JS%E5%9F%BA%E7%A4%8E/%E4%BD%9C%E7%94%A8%E5%9F%9F%E8%88%87%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%8F%88.html"},{excerpt:" 從 2019 開始買了第一顆以太後，陸陸續續玩了很多幣圈內的項目。 從 defi、NFT、gamefi 還去玩了一下合約炒炒幣，但是始終沒有想過身為技術人員，怎麼不從技術層面去理解區塊鏈相關技術呢?  所以在去年決定了某一項今年目標就是從技術方面深入區塊鏈產業。   2022  一月份用 udemy 的 某一個 NFT 課程學習，學到了如何寫 solidity 合約。   為了更加熟悉 s......",tags:["想法"],id:5,title:"2022總結",lastUpdated:"2022-12-31 00:22:53",path:"/posts/%E5%BF%83%E5%BE%97/2022%E7%B8%BD%E7%B5%90.html"},{excerpt:" 今年發生了很多不太好事情，導致學習上心態也出現的怠惰，俗稱的躺平吧。   雖然去年所訂的目標只剩 JS高級程序(第四版) 還沒完成，但知識還是要進到頭腦才是吸收，我自己評分的話大概70分吧！   有些知識雖然了解，但並沒有學習到更加深入。      公司 今年公司的產品大多都是維護跟開發 feature 為主，因此並沒有比較有印象的事情， 但比較有印象的就是實作代碼規範化的腳手架吧！   ......",tags:["想法"],id:6,title:"2021總結",lastUpdated:"2022-01-11 14:17:36",path:"/posts/%E5%BF%83%E5%BE%97/2021%E7%B8%BD%E7%B5%90.html"},{excerpt:"  HTTP 緩存   What HTTP 緩存是一種優化系統性能的利器，能夠將使用 HTTP 請求獲得到的資料儲存起來，等到下次請求時復用。   減少多次的 HTTP 請求 - 應答的成本，減少網路帶寬及增加響應速度。       Why 假如資料沒有變動過的話, 重複請求相同資料非常浪費網路資源，所以使用緩存將其儲存起來，再次取得資源時響應速度也會比直接從服務端請求快上許多。 ......",tags:["HTTP"],id:7,title:"HTTP 緩存機制",lastUpdated:"2021-11-09 17:10:22",path:"/posts/HTTP/HTTP%E7%B7%A9%E5%AD%98.html"},{excerpt:" 由於公司近期購買四個專案回來開發並維護，但並未使用 ESLint 去規範程式碼。另外這些專案大概有三四個前端共同維護，在修改 code 時風格不同或者格式化配置不同而自動格式化更新代碼，導致提交時修改了與feature / bug 無關聯的 code ，導致 code review 困難。所以萌生導入代碼規範化的系統。     \b導入這套系統的好處: - code review 時能專注在檢查 ......",tags:["工程化"],id:8,title:"代碼統一規範化( husky + lint-staged )",lastUpdated:"2021-01-14 11:23:23",path:"/posts/%E5%B7%A5%E7%A8%8B%E5%8C%96/%E4%BB%A3%E7%A2%BC%E7%B5%B1%E4%B8%80%E8%A6%8F%E7%AF%84%E5%8C%96.html"},{excerpt:" 要將 JavaScript 引入網頁的話，首先必須解決與網頁的主導語言 HTML 的相關問題。要如何兼容到 HTML? 最終使用&lt;\\script&gt;來加載腳本。   script 元素  提供八種屬性，這裡只介紹其中幾個常用的  1. defer: 能夠使腳本先被加載，等到頁面解析至&lt;/html&gt;時才會執行腳本內容 2. async: 與 defer 相似，但在加載時不......",tags:["javascript","JS高級程序"],id:9,title:"ch02 - HTML中的JS",lastUpdated:"2021-01-08 01:00:10",path:"/posts/JS%E9%AB%98%E7%B4%9A%E7%A8%8B%E5%BA%8F/HTML%E4%B8%AD%E7%9A%84JS.html"},{excerpt:"  起 這是第一次做總結，這個blog大約在換第二份工作時創的，原先想說要開始記錄工作與學習心得的，但是後來發現篇幅小的就寫在hackmd或者github上，而且越來越懶就沒寫了XD     想說在2020最後一天做一下今年總結，期許明年可以依照原先計畫多寫幾篇文章。     工作  去年的時候自己剛完成第一個以Vue全家桶為架構的專案，而今年因為業者新需求而需要將原先專案的某些功能刪......",tags:["想法"],id:10,title:"2020總結",lastUpdated:"2020-12-31 17:20:16",path:"/posts/%E5%BF%83%E5%BE%97/2020%E7%B8%BD%E7%B5%90.html"},{excerpt:" \b\b\b   構造函數繼承  構造函數繼承的概念就是子函數透過 call,apply 方式去調用要繼承的父層構造函數。 缺點是我們無法調用父層的 Prototype 並且由於構造函數返回的實例都是各自獨立的，所以我們沒辦法創建一個共用的方法或屬性。  ```js let Parent = function() {   this.child = [] } Parent.prototype.hel......",tags:["javascript","JS基礎"],id:11,title:"JS各種繼承方法以及如何用ES5實現ES6的class",lastUpdated:"2020-04-29 00:32:20",path:"/posts/JS%E5%9F%BA%E7%A4%8E/inherit.html"},{excerpt:" 本文將會談到 - 構造函數\b(constructor)是什麼? - 原型(prototype)是什麼? - prototype與__proto__ 關聯性 - \bnew操作符實際做了什麼事? - 如何查找原型方法及屬性   前言 由於JS作者在開發時，是將其定位在簡單的腳本語言，所以就沒打算引入Class的概念。但是又需要設計繼承的概念，方便將物件關聯起來。所以最終作者還是設計了繼承。  作......",tags:["javascript","JS基礎"],id:12,title:"談談構造函數(constructor)與原型(prototype)的設計",lastUpdated:"2020-04-18 02:26:57",path:"/posts/JS%E5%9F%BA%E7%A4%8E/prototype.html"},{excerpt:"  內建型別  JS內建七種型別分別是: 1. null 2. undefined 3. number 4. boolean 5. string 6. symbol (ES6新增) 7. object  當中只有object是引用型別其餘則是一般類型，那麼這兩種類型又有什麼區別呢？   這就需要先說JS是怎麼保存變量。   引用型別與一般類型  在賦值給一個變量時，會將變數與值類似於......",tags:["javascript","你不知道的JS"],id:13,title:"『你不知道的JS』- 型別與文法",lastUpdated:"2019-09-22 23:57:09",path:"/posts/%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84JS/%E5%9E%8B%E5%88%A5%E8%88%87%E6%96%87%E6%B3%95.html"},{excerpt:" 在做表單時總是需要告訴使用者輸入是否正確，所以我們需要去驗證輸入文字是否符合規則，並顯示錯誤。   透過這個驗證套件我們能夠更快速的驗證錯誤，至於我為何會選擇VeeValidate呢？   因為他目前還有持續在維護並且star數也蠻多的，代表使用者有一定的量！接下來就來介紹囉     安裝與usage ```js npm i vee-validate --save ```  安裝完後需要在m......",tags:["vue"],id:14,title:"Vue的表單驗證套件 - VeeValidate!",lastUpdated:"2019-07-03 17:53:00",path:"/posts/vue/veeValidate.html"},{excerpt:"  前言   當我們在開發專案時，有時很常需要使用表格來顯示資料，但每個表格的標題與內容要展示的都可能不一樣，當表格資料都是純文字時非常的好解決這個問題，但表格內容需要有一些操作時 例如: 需要操作按鈕等等... 這時表格組件規劃起來就特別的麻煩。所以今天要介紹如何在表格組件中攥寫自定義的資料   策略  - 有兩個資料參數(header,data)，header代表標頭的資料、data代......",tags:["vue"],id:15,title:"Vue 自定義列的Table組件開發",lastUpdated:"2019-06-13 18:07:56",path:"/posts/vue/table-model.html"},{excerpt:"  數據類型 js的數據類型分成兩類：原始類型(primitive type)與對象類型(object type)。   原始類型包含Number,String,Boolean,null,undefined,Symbol(es6)。     原始類型 創造Number,String,Boolean 變數時可以使用直接量定義,也可以透過new 來創造構建函數。 ```js var num =......",tags:["javascript","JS權威指南"],id:16,title:"『JS權威指南』- 類型",lastUpdated:"2019-06-03 18:05:58",path:"/posts/js%E6%AC%8A%E5%A8%81%E6%8C%87%E5%8D%97/ch02-type.html"},{excerpt:" 前言 物件是javascript的引用數據類型，可以通過三種方法來創建物件(物件直接量、透過new、Object.create())。   物件可以從一個原型物件繼承屬性，這種『原型式繼承』是javascript的核心特徵。   javascript物件是動態的，意思是你可以對一個物件直接新增屬性，也可以刪除屬性(屬性指的就是物件內的key:value)。   \b物件的屬性中有三種特性，而物......",tags:["javascript","JS權威指南"],id:17,title:"『JS權威指南』- 物件object",lastUpdated:"2019-05-30 18:06:56",path:"/posts/js%E6%AC%8A%E5%A8%81%E6%8C%87%E5%8D%97/ch06-object.html"},{excerpt:"  前言 在做專案時需要跑馬燈的功能，剛好找到一個open source覺得還不錯，就去理解他實現跑馬燈的代碼思路，順便記錄下來！   代碼思路  - HTML結構會有兩層div，父層為固定，子層存放跑馬燈文字來進行滑動 - 透過css3 動畫 @keyframe 控制 transform: translate3d的X軸來達成文字滑動效果   - 透過getBoundingClientRe......",tags:["vue","組件實現"],id:18,title:"在vue中實現跑馬燈功能",lastUpdated:"2019-05-30 18:06:56",path:"/posts/vue/vue-marquee.html"}],i={name:"Layout",data:()=>({isHide:!1,needOverlay:!1,content:s}),methods:{clickMenu(){this.isHide=!this.isHide,"undefined"!=typeof window&&window.innerWidth<=1190&&(this.needOverlay=!this.needOverlay)},close(){this.needOverlay=!this.needOverlay,this.isHide=!this.isHide}}},l=(a(400),a(30)),p=Object(l.a)(i,(function(){var t=this,e=t._self._c;return e("div",{staticStyle:{height:"100%"}},[e("el-container",{staticClass:"main-container"},[e("my-aside",{attrs:{isHide:t.isHide}}),t._v(" "),e("el-container",{staticClass:"container-warp"},[e("my-header",{attrs:{showIcon:t.isHide},on:{clickMenu:t.clickMenu}},[t._v("\n        >")]),t._v(" "),e("my-main",{attrs:{isHide:t.isHide,content:t.content}})],1),t._v(" "),e("go-top")],1),t._v(" "),e("my-footer",{attrs:{content:t.content,isHide:t.isHide}}),t._v(" "),e("div",{staticClass:"overlay",class:{"overlay--active":t.needOverlay},on:{click:t.close}})],1)}),[],!1,null,"4bb4fac0",null);e.default=p.exports}}]);